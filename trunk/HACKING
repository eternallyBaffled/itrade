/iTrade/HACKING
===============================================================================

Read everything below before hacking something in the iTrade project. If you
have any doubt, ask to one of the Lead Developers.

-------------------------------------------------------------------------------
Access the source
-------------------------------------------------------------------------------

In order to access the sources, you need to setup access to our SVN repository,
and you will need a SVN client.

The following are supported SVN clients :

    * TortoiseSVN 1.2.6 and above, for Microsoft Windows

       => download : http://tortoisesvn.net/downloads
       => documentation : http://sourceforge.net/docs/F07/en/#top
       => FAQ : http://tortoisesvn.net/node/131

    * The official SVN client, included in most Linux and BSD distributions;
      available for Linux, BSD, Mac OS X, and Windows.

       => download : http://subversion.tigris.org/
       => documentation : http://sourceforge.net/docs/F06/en/#top

Project URL : https://itrade.svn.sourceforge.net/svnroot/itrade

Typical command line to check out everything (trunk, branches and tags) :

	svn co https://itrade.svn.sourceforge.net/svnroot/itrade itrade

In most cases, you will want to add '/trunk' to the HTTPS URL above to check
out only trunk (main development line) :

Project trunk URL : https://itrade.svn.sourceforge.net/svnroot/itrade/trunk

-------------------------------------------------------------------------------
Development Process
-------------------------------------------------------------------------------

o Create a tracker to indicate you are going to work on something. So everyone
  involved in the project is aware of the new development.

  Submit New : https://sourceforge.net/tracker/?group_id=128261&atid=711187

	Category : must be filled

		General : a general feature/bug fix
		Linux Specific : a feature/bug fix related to the linux
		MMI : feature/bug fix is only MMI (front-end - wxpython)
		Process : feature/bug fix is only Process (back-end)
		Release : feature/bug fix on the ./RELEASE process itself
		Website : feature/bug fix on the website

	Group : the iTrade release targetted by the feature/bug fix

		NB: do not use this field to indicate the release where the
		issue has been found but to indicate the release where the
		issue will be solved.

		Use "TBD" when you don't know yet the targetted release.

	Priority : everything should be 5 :)

	Assigned To : who is working on the tracker.

o Change the "Resolution" field of the tracker to "Accepted" when :
   - you are really working on it (feature)
   - you are really fixing it (bug)

  It means also for everyone involved in the project that you have take lead on
  the subject.

  You can comment the traker with information about your status on the subject.

o Delivery new code (new module or modified module) :

  => update the ChangeLog file (notice the change, indicate the Tracker unique
     number)

  => commit everything related to the feature / bug fix using SVN comment filed
     with the ChangeLog information

  => change the tracker "Resolution" field to "Fixed"

o Change the "Status" field of the tracker to "Closed" after the final deliver
  has been committed (see section above) but also after you have conducted real
  Test Session to be sure the tracker can be really closed.

  Check with the Testing Team (michel :) if you have any doubt.

o Derogation to the Development Process

  You can bypass the Development Process for light weight code change (very
  small feature or very small bug never seen before) :

  => update the ChangeLog file (notice the change)

  => commit everything related to code change using SVN comment filed with the
     ChangeLog information

-------------------------------------------------------------------------------
Developement Policies
-------------------------------------------------------------------------------

o Create a module

  => discuss the module content and architecture with the Lead Developer

o Developing an "impacting" new feature
  by "impacting", we mean something touching a lot of files with potential huge
  number of regressions and/or API changes

  => discuss the "impacting" new feature architecture with the Lead Developer

  => create a temporary development branch to isolate the changes until
     everything is stabilized (Gilles did it for the new reference mechanism
     by using a specific ITRADE_0_4_5_new_quote_reference branch)

     branch name : ITRADE_x_y_z_feature
	where x.y.z   is the iTrade release number (more info in ./RELEASE)
	      feature is the name of the new feature

-------------------------------------------------------------------------------
Extensions / Plugins Architecture
-------------------------------------------------------------------------------

Extensions and Plugins files are in the ./ext folder.

Read ./ext/README file for more information.

-------------------------------------------------------------------------------
Current Development notes
-------------------------------------------------------------------------------

o urllib -- Open arbitrary resources by URL
  http://www.python.org/doc/lib/module-urllib.html

o htmllib -- A parser for HTML documents
  http://www.python.org/doc/lib/module-htmllib.html

o File format : CSV compatible with EBP
  all the backend use the EBP format convention : this is a definitive design
  choice and this will be the only format supported.
  so connector from various sources like yahoo, are converted to EBP format
  on the fly

o Tracing Python Programs
	/usr/lib/python2.4/trace.py -t program.py
  This'll print out the filename, line number and contents of that line before
  executing the code. If you want to skip the output for the standard library
  (ie. only show statements from your own code), simply pass
  --ignore-dir=/usr/lib/python2.4 (or similar) as an option

o Feed parser (to read news from a quote)
  http://sourceforge.net/projects/feedparser/

o Yahoo Quote Grabber
  http://rimonbarr.com/repository/pyq/code/pyq

o python 2 executable (binary pack) - see also setup.py in /itrade folder
  http://www.py2exe.org

o Matplotlib and wxPython
  http://www.scipy.org/wikis/topical_software/EmbeddingInWx

o Date formating
   strptime( string[, format])
   strftime( format[, t])

	%a Locale's abbreviated weekday name.
	%A Locale's full weekday name.
	%b Locale's abbreviated month name.
	%B Locale's full month name.
	%c Locale's appropriate date and time representation.
	%d Day of the month as a decimal number [01,31].
	%H Hour (24-hour clock) as a decimal number [00,23].
	%I Hour (12-hour clock) as a decimal number [01,12].
	%j Day of the year as a decimal number [001,366].
	%m Month as a decimal number [01,12].
	%M Minute as a decimal number [00,59].
	%p Locale's equivalent of either AM or PM.
	%S Second as a decimal number [00,61].
	%U Week number of the year (Sunday as the first day of the week) as a
	   decimal number [00,53]. All days in a new year preceding the first
	   Sunday are considered to be in week 0.
	%w Weekday as a decimal number [0(Sunday),6].
	%W Week number of the year (Monday as the first day of the week) as a
	   decimal number [00,53]. All days in a new year preceding the first
	   Monday are considered to be in week 0.
	%x Locale's appropriate date representation.
	%X Locale's appropriate time representation.
	%y Year without century as a decimal number [00,99].
	%Y Year with century as a decimal number.
	%Z Time zone name (no characters if no time zone exists).
	%% A literal "%" character.

o Context Help in wxDialog object
  http://sourceforge.net/tracker/index.php?func=detail&aid=1410679&group_id=128261&atid=711187

   wxPython documentation is not really clear :

   def __init__(self,...):

  	# context help
  	pre = wxPreDialog()
  	pre.SetExtraStyle(wxDIALOG_EX_CONTEXTHELP)
  	pre.Create(parent, ID, title, pos, size, style)
  	self.PostCreate(pre)
  	...
  	# context help
  	if wxPlatform != "__WXMSW__":
  	   btn = wxContextHelpButton(self)
  	   box.Add(btn, 0, wxALIGN_CENTRE|wxALL, 5)

 o iTradeSizedDialog

   All iTrade forms *must* use the sized controls (HIG-compliant sizers under
   the hood). Note that Context Help is available through iTradeSizedDialog

   For HIG info: links to all the HIGs can be found here:
   http://en.wikipedia.org/wiki/Human_Interface_Guidelines

   Typical Usage:

    import wxaddons.sized_controls as sc
    from itrade_wxutil import iTradeSizedDialog
    ...
    class myForm(iTradeSizedDialog):

	def __init__(self,...):
		iTradeSizedDialog.__init__(self,...,style=wx.DEFAULT_DIALOG_STYLE | wx.RESIZE_BORDER,...)

        	# container
        	container = self.GetContentsPane()
        	container.SetSizerType("vertical")

        	# resizable pane
        	pane = sc.SizedPanel(container, -1)
        	pane.SetSizerType("form")
        	pane.SetSizerProps(expand=True)

        	# Row 1
        	label = wx.StaticText(pane, -1, message('ref'))
        	label.SetSizerProps(valign='center')
        	self.wxField = wx.TextCtrl(pane, -1, self.m_field, size=(80,-1))
        	self.wxField.SetSizerProps(expand=True)

		...

        	# Last Row : OK and Cancel
        	btnpane = sc.SizedPanel(container, -1)
        	btnpane.SetSizerType("horizontal")
        	btnpane.SetSizerProps(expand=True)

        	# context help
        	if wx.Platform != "__WXMSW__":
        	    btn = wx.ContextHelpButton(self)

        	# OK
        	btn = wx.Button(btnpane, wx.ID_OK, msg)
        	btn.SetDefault()
        	btn.SetHelpText(msgdesc)
        	wx.EVT_BUTTON(self, wx.ID_OK, self.OnValid)

        	# CANCEL
        	btn = wx.Button(btnpane, wx.ID_CANCEL, message('cancel'))
        	btn.SetHelpText(message('cancel_desc'))

        	# a little trick to make sure that you can't resize the dialog to
        	# less screen space than the controls need
        	self.Fit()
        	self.SetMinSize(self.GetSize())

    wx.Window.SetSizerProps(<props>)

 Parameter 	Values 			Summary
 expand 	True/False      	Whether or not the control should grow
					to fill free space if free space is
					available.

 proportion 	Number (typically 0-10) How much of the free space the control
					should take up. Note that this value is
					relative to other controls, so a
					proportion of 2 means take up 'twice as
					much' space as controls with a
					proportion of 1.

 halign 	"left", "center",       Determines horizontal alignment of
		"centre", "right"	control.

 valign 	"top", "center",        Determines vertical alignment of
		"centre", "bottom"	control.

 border 	Tuple: ([dirs],integer) Specifies amount of border padding to
					apply to specified directions.
					Example: (["left", "right"], 6) would
					add six pixels to left and right borders.

					Note that, unfortunately, it is not
					currently possible to assign different
					border sizes to each direction.

 minsize 	"fixed", "adjust" 	Determines whether or not the minsize
					can be updated when the control's best
					size changes.

===============================================================================
